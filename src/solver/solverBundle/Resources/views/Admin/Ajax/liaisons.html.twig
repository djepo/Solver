<div class="ui-widget-content">
    <div id="container_treeview" style="overflow: auto;min-height: 350px; max-height: 350px;">
    </div>
</div>
<div class="ui-widget-content" style="margin-top: 10px;">
    <img id="node_detail_ajax_indicator" src="{{asset('bundles/solvermain/images/indicator_snake.gif')}}" style="display: none;"></img>
    <div id="node_detail" style="min-height: 200px;">
    </div>
</div>

<script>
    $(function () {
	$("#container_treeview").jstree({
            "html_data" : {
                "ajax" : {
                    "url" : "{{url('admin_ajax_liaisonsTreeviewLoad')}}",
                    "data" :    function (n) {
                                                if (n.attr) {
                                                    return {id:n.attr('id')};
                                                }
                                                else {
                                                    return "";
                                                }
                                             },
                    }
            },
            "plugins" :     [ "themes", "ui", "html_data", "hotkeys","crrm", "contextmenu", "types", "checkbox"],
            "core":         {'animation':100},
            "checkbox":     {   "two_state":        true,
                                "real_checkboxes":  true,
                            },
            "contextmenu":  {   "select_node":  true,
                                "show_at_node": false,
                                "items":        MenuPerso,
                            },
            "themes":       {"theme": "default"},
            "types":        {                            
                            "valid_children":    ["root"],
                            "types":    {
                                            "root":     {
                                                            "delete_node":  false,
                                                            "rename_node":  false,
                                                            "icon": {
                                                                        "image":    "{{asset('bundles/solvermain/images/treeview/root_icon.png')}}",
                                                                    },
                                                        },
                                            "entite":   {
                                                            "icon": {
                                                                        "image":    "{{asset('bundles/solvermain/images/treeview/something_icon.png')}}",
                                                                    },
                                                        },
                                            "probleme": {
                                                            "icon": {
                                                                        "image":    "{{asset('bundles/solvermain/images/treeview/problem_icon.png')}}",
                                                                    },
                                                        },
                                            "solution": {
                                                            "icon": {
                                                                        "image":    "{{asset('bundles/solvermain/images/treeview/solution_icon.png')}}",
                                                                    },
                                                        },
                                        },
                            },
	});
    });

    //définition du menu pour le treeview
    //principe: on crée tout le menu, et on désactive ce qui ne sers pas, selon le type de noeud
    function MenuPerso(node)
    {
        // The default set of all items
        var items = {
                        createEntite: {
                                            label: "Nouvelle entité",
                                            action: function (obj) {this.create(obj, "last", {"attr" : {"rel" : "entite"}});},
                                        },
                        createSolution: {
                                            label: "Nouvelle solution",
                                            action: function (obj) {this.create(obj, "last", {"attr" : {"rel" : "solution"}});},
                                        },
                        createProbleme: {
                                            label: "Nouveau problème",
                                            action: function (obj) {this.create(obj, "last", {"attr" : {"rel" : "probleme"}});},
                                        },
                        renameItem:     { // The "rename" menu item
                                            label: "Renommer",
                                            separator_before:   true,
                                            action: function (obj) {this.rename(obj);},

                                        },
                        deleteItem:     { // The "delete" menu item
                                            label: "Effacer",
                                            //action: function (obj) {this.remove(obj)},
                                            action: function (obj){myRemove(obj);},
                                            separator_after:    true,
                                        }
                    };

        if ($(node).attr("rel")=="root")
        {
            delete items.createSolution;
            delete items.createProbleme;
            items.deleteItem._disabled=true;
            items.renameItem._disabled=true;
        }
        else
        {
            switch ($(node).attr("rel").substring(0,1))
            {
                case "e":
                    delete items.createSolution;
                    delete items.createEntite;
                    break;
                case "p":
                    delete items.createEntite;
                    break;
                case "s":
                    delete items.createEntite;
                    delete items.createSolution;
                    delete items.createProbleme;
                    break;
                default:
                    break;
            }
        }


        return items;
    }

    $("#container_treeview").bind("loaded.jstree", function(e, data) {
        //cache la checkbox du root
        $("#root").children('a').find('ins.jstree-checkbox').hide();
        $("#container_treeview").jstree("select_node","#root");
    });

    //redirection de la selection par défaut dans la fonction select_node
    $(function() {
        $("#container_treeview").bind('select_node.jstree', function(e, data){
            select_node(e,data);
        });
    });
    //redirection du renommage par défaut dans la fonction rename
    $(function() {
        $("#container_treeview").bind('rename.jstree', function(e, data){
            rename (e,data);
        });
    });
    //redirection de la création par défaut dans la fonction create
    $(function() {
        $("#container_treeview").bind("create.jstree", function(e,data) {
            create (e, data);
        });
    });
     //redirection de la modification des cases a cocher par défaut dans la fonction check
    $(function() {
        $("#container_treeview").bind("check_node.jstree", function(e,data) {
            check_node (e, data);
        });
    });
    //redirection de la modification des cases a cocher par défaut dans la fonction check
    $(function() {
        $("#container_treeview").bind("uncheck_node.jstree", function(e,data) {
            check_node (e, data);
        });
    });

    var displaying_detail;
    function select_node (e, data)
    {
        var node=data.rslt.obj;
        var node_id=node.attr('id');
        var node_type=node.attr('rel');
        var node_lib=node.children('a').text();
        
        if (displaying_detail) {displaying_detail.abort();}
        
        $('#node_detail_ajax_indicator').show();
        
        //$("#node_detail").html("");   //passe la div a vierge
        
        displaying_detail=$.ajax({
            async:  true,
            type:   "POST",
            url:    '{{url('admin_ajax_liaisonstreeview_nodedetail')}}',
            data:   {   "type": node_type,
                        "id":   node_id,
                    },
            success: function(data, textStatus, jqXHR)
                            {
                                $("#node_detail").html(data);
                            },
            error:  function (jqXHR, textStatus, errorThrown)
                            {
                                if (errorThrown!="abort")
                                {
                                    displayError(jqXHR.responseText);
                                    $.jstree.rollback(data.rlbk);
                                }
                            },
        });
        
        $('#node_detail_ajax_indicator').hide();
    }

    function rename(e, data)
    {
        var node = data.rslt.obj;

        $("#container_treeview").jstree("deselect_all");
        node.children("a").attr("class","jstree-loading");  //démarrage de l'icône ajax

        if (data.args[0].attr("id")!="root")
        {
            if(data.rslt.new_name!=data.rslt.old_name)
            {
                //alert('on renomme');
                var id=data.args[0].attr("id");
                var libelle=data.rslt.new_name;
                $.ajax({async:false,
                        type: 'POST',
                        url: '{{url('admin_ajax_liaisonstreeview_Rename')}}',
                        data: { 'id':       id,
                                'type':     node.attr("rel"),
                                'libelle':  libelle,
                              },
                        success: function(data, textStatus, jqXHR)
                            {
                                //rafraichissement de tous les noeuds ayant le même id
                                $("#container_treeview li").each(function(){
                                    id2=$(this).attr("id");
                                    if(id2==id)
                                    {
                                        valins=$(this).children("a > ins").text();
                                        $(this).children("a").html('<ins class="jstree-checkbox">&nbsp</ins><ins class="jstree-icon">&nbsp;</ins>'+libelle);

                                    }
                                });
                            },
                        error:  function (jqXHR, textStatus, errorThrown)
                            {                                
                                displayError(jqXHR.responseText);
                                $.jstree.rollback(data.rlbk);
                            }
                });
            }
            else
            {
                //alert('on ne renomme pas');
                $.jstree.rollback(data.rlbk);
            };
        }
        
        $("#container_treeview").jstree("select_node",node);    //sélection du noeud renommé (pour déclencher l'evenement select, qui mettra a jour le formulaire avec le libellé renommé)
        node.children("a").attr("class","jstree-clicked");      //on enleve l'indicateur ajax pour remettre l'icone par défaut
    }

    function create (e, data)
    {
        var parent_id=data.rslt.parent[0].id;
        var libelle=data.rslt.name;
        var node = data.rslt.obj;

        $("#container_treeview").jstree("deselect_all");
        node.children("a").attr("class","jstree-loading");  //démarrage de l'icône ajax

        $.ajax({
                async: false,
                type:"POST",
                url: '{{url('admin_ajax_liaisonstreeview_create')}}',
                data:   {   'parent_id':    parent_id,          //l'identifiant du parent
                            'type':         node.attr('rel'),   //le type de noeud créé (l'attribut rel)
                            'libelle':      libelle,            //le libellé créé
                        },
                success: function(json_data, textStatus, jqXHR)
                         {
                             var prefixe_id=null;

                             switch(json_data.type)
                             {
                                 case "entite":
                                    prefixe_id="e";
                                    break;
                                 case "probleme":
                                     prefixe_id="p";
                                     break;
                                 case "solution":
                                     prefixe_id="s";
                                     break;
                                 case "error":  //le contrôleur renvoie une erreur, on va afficher le libelle
                                     alert (json_data.libelle);
                                     $.jstree.rollback(data.rlbk);
                                    break;
                                 default:
                                     alert ('Erreur: Type retourné inconnu.')
                                     $.jstree.rollback(data.rlbk);
                                     break;
                             }

                             if (prefixe_id!=null) {
                                node.attr("id",prefixe_id+json_data.id);   //insertion de l'id du noeud en fonction de son préfixe et de l'id renvoyée
                             }

                             //rafraichissement de tous les noeuds ayant le même id
                             var parent_found=false;    //init du flag parent_trouvé
                             $("#container_treeview li").each(function(){
                                id_parcouru=$(this).attr("id");

                                if(id_parcouru==parent_id)
                                {
                                    parent_found=true;      //on a trouvé le parent
                                    var child_found=false;  //init du flag enfant trouvé

                                    $(this).children('ul').children('li').each(function(){
                                        if($(this).attr('id')==prefixe_id+json_data.id) {child_found=true}  //on a trouvé l'enfant
                                    });
                                }
                                if (parent_found==true && child_found==false )  //si on a un parent, avec l'enfant recherché non présent
                                    {
                                        //on ajoute l'enfant
                                        $('#container_treeview').jstree("create_node", $(this),"last",{attr: {"rel": node.attr('rel'), "id": prefixe_id+json_data.id}, data: libelle,});
                                        $(this).children("ul").children("li:last").toggleClass('jstree-unchecked jstree-checked');   //on coche le noeud comme étant affiché
                                        parent_found=false; //reset des flags
                                        child_found=false;  //reset des flags
                                    }

                            });
                         },
                error:   function (jqXHR, textStatus, errorThrown)
                         {
                            displayError(jqXHR.responseText);
                            $.jstree.rollback(data.rlbk);
                         },
        });

        $("#container_treeview").jstree("select_node",node);    //sélection du noeud renommé (pour déclencher l'evenement select, qui mettra a jour le formulaire avec le libellé créé)        
        $(node).toggleClass('jstree-unchecked jstree-checked');   //on coche le noeud comme étant affiché
        node.children("a").attr("class","jstree-clicked");      //fin de l'icone de travail ajax, remise en place de l'icone par défaut

    }

    /**
    * Lors d'un appel a la supression, affiche une boite de confirmation, et apelle la fonction adéquate en cas d'acceptation
    **/
    function myRemove(obj)
    {
        var $dialog= $('<div></div>').html('Voulez-vous réellement effacer "'+obj.children('a').text()+'" ?')
                                     .dialog({  resizable:  false,
                                                //height:     140,
                                                modal:      true,
                                                title:      "Attention requise",
                                                dialogClass:"alert",
                                                buttons: {  "Non":   function() {$(this).dialog('close');},
                                                            "Oui":   function() {$(this).dialog('close'); callRemoveConfirmed(obj);},
                                                         },
                                            });


        $dialog.dialog('open');
    }

    /**
    * Fonction appelée après la confirmation utilisateur d'effacement d'un noeud.
    **/
    function callRemoveConfirmed(node)
    {
        $("#container_treeview").jstree("deselect_all");
        node.children("a").attr("class","jstree-loading");  //démarrage de l'icône ajax

        $.ajax({
                async:  false,
                type:   "POST",
                url:    '{{url('admin_ajax_liaisonstreeview_remove')}}',
                data:   {   'id':   node.attr('id'),
                            'type': node.attr('rel'),
                        },
                success:function(json_data, textStatus, jqXHR)
                        {
                            //rafraichissement de tous les noeuds ayant le même id
                            $("#container_treeview li").each(function(){
                                id2=$(this).attr("id");
                                if(id2==node.attr('id'))
                                {
                                    $('#container_treeview').jstree("delete_node",'#'+id2);
                                }
                            });
                        },
                error:  function (jqXHR, textStatus, errorThrown)
                        {
                            displayError(jqXHR.responseText);
                        },
        });
        
        $("#container_treeview").jstree("select_node","#root");    //sélection du noeud renommé (pour déclencher l'evenement select, qui mettra a jour le formulaire avec le libellé créé)
        
    }

    function check_node(e, data)
    {
        //alert('check');
        var node = data.rslt.obj;
        $("#container_treeview").jstree("deselect_all");

        node.children("a").attr("class","jstree-loading");  //démarrage de l'icône ajax

        var id=node.attr("id");
        var value=$("#container_treeview").jstree("is_checked", node);

                $.ajax({async:false,
                        type: 'POST',
                        url: '{{url('admin_ajax_liaisonstreeview_check')}}',
                        data: { 'id':       id,
                                'type':     node.attr("rel"),
                                'value':  value,
                              },
                        success: function(data, textStatus, jqXHR)
                            {
                                //rafraichissement de tous les noeuds ayant le même id
                                $("#container_treeview li").each(function(){
                                    id2=$(this).attr("id");
                                    if(id2==id)
                                    {
                                        if (value==true) {                                            
                                            if ($(this).hasClass('jstree-unchecked')) {
                                                $(this).toggleClass('jstree-unchecked jstree-checked');                                            
                                            }
                                        } else {
                                            if ($(this).hasClass('jstree-checked')) {
                                                $(this).toggleClass('jstree-unchecked jstree-checked');                                            
                                            }
                                        }
                                    }
                                });
                            },
                        error:  function (jqXHR, textStatus, errorThrown)
                                {
                                    displayError(jqXHR.responseText);
                                    $.jstree.rollback(data.rlbk);
                                },
                });

        $("#container_treeview").jstree("select_node",node);    //sélection du noeud renommé (pour déclencher l'evenement select, qui mettra a jour le formulaire avec le libellé créé)        
        node.children("a").attr("class","jstree-clicked");  //fin de l'icone de travail ajax, remise en place de l'icone par défaut
        
    }

    function displayError(text)
    {
        var $error_dialog= $('<div></div>').html(text)
                                     .dialog({  //resizable:  false,
                                                modal:      true,
                                                title:      "Erreur",
                                                dialogClass:"error",
                                                autoOpen:   false,
                                            });
        $error_dialog.dialog('open');
    }
</script>