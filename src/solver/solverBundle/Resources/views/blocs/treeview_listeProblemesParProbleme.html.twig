{# utilisé pour la génération du treeview #}
{# Appel récursif #}

{% set level=level+1 %}

{%for probleme in problemes%}

    {%set mémo=problems_chaining %} {# Mémorisation de l'enchainement, pour réinjection ultérieure#}
    {% set problems_chaining=problems_chaining|merge([probleme.problemeamont.id]) %}    {# mémorisation du problème actuellement parcouru (ajout a la chaine déjà existante) #}

    {# Calcul de la chaine d'enchainement de problèmes, à passer en paramètre de lien #}
    {% set enchainement=null %}
    {%if level>1 %}
        {% for i in 0..level-2 %}
            {% set enchainement=enchainement~problems_chaining[i]~"&" %}
        {% endfor %}
    {%endif%}
    {% set enchainement=enchainement~problems_chaining[level-1] %}
    {# Fin calcul #}

    <ul>
        <li id="{{"probleme"~probleme.problemeamont.id}}">
            <a href="{{path('select_entite_pb',{'entite_id': ids.entite_id, 'symptome_id': ids.symptome_id, chain: enchainement})}}">{{probleme.problemeamont.libelle}}</a>

            {#RECURSIVITE: On appelle le template lui même autant de fois que nécessaire, afin d'afficher tous les sous problèmes #}
            {%set problemes=probleme.problemeamont.problemesamont%} {# la varialbe problemes représente tous les sous problèmes amonts du problème actuellement parcouru #}
            {%include(_self)%}  {# appel au template actuel, de manière récursive #}
        </li>
    </ul>

    {% set problems_chaining=mémo %}    {# Une fois tous les sous problèmes explorés, on réinjecte l'enchainement mémorisé avant l'xploration en profondeur #}

{%endfor%}